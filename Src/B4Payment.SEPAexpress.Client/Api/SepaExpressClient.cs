//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace B4Payment.SEPAexpress.Client.Api
{
    using System;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SepaExpressClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public SepaExpressClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new bank account
        /// </summary>
        /// <remarks>
        /// Creates a new bank account. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateBankAccountHttpResponse> BankAccountsPOSTAsync(CreateBankAccountHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/BankAccounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateBankAccountHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of bank accounts
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of bank accounts.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.          
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="customerId">Return only objects with this customer id. Optional.</param>
        /// <param name="iban">Return only objects with this IBAN. Optional.</param>
        /// <param name="bic">Return only objects with this BIC. Optional.</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional.</param>
        /// <param name="countryCode">Return only objects with this country code. Optional.</param>
        /// <param name="bankCode">Return only objects with this national bank code. Optional.</param>
        /// <param name="branchCode">Return only objects with this national branch code. Optional.</param>
        /// <param name="accountNumber">Return only objects with this national account number. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBankAccountsHttpResponse> BankAccountsGETAsync(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, string customerId = null, string iban = null, string bic = null, string currencyCode = null, string countryCode = null, string bankCode = null, string branchCode = null, string accountNumber = null, bool? includeCustomer = null, bool? includeMerchant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/BankAccounts?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bic != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bic") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bic, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (branchCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("branchCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(branchCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (accountNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("accountNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBankAccountsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific bank account
        /// </summary>
        /// <remarks>
        /// Returns a specific bank account.
        /// </remarks>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetBankAccountHttpResponse> BankAccountsGET2Async(string id, bool? includeCustomer = null, bool? includeMerchant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/BankAccounts/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBankAccountHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific connector
        /// </summary>
        /// <remarks>
        /// Returns a specific connector.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeSchemeConfiguration">Indicates whether the full SchemeConfiguration object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetConnectorHttpResponse> ConnectorsAsync(string id, bool? includeMerchant = null, bool? includeSchemeConfiguration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Connectors/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeSchemeConfiguration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSchemeConfiguration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSchemeConfiguration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConnectorHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of connectors
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of connectors.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="name">Return only objects with this name. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="mandateReviewEnabled">Return only objects depending on whether the field MandateReviewEnabled is set to true or false. Optional.</param>
        /// <param name="paymentReviewEnabled">Return only objects depending on whether the field PaymentReviewEnabled is set to true or false. Optional.</param>
        /// <param name="payoutReviewEnabled">Return only objects depending on whether the field PayoutReviewEnabled is set to true or false. Optional.</param>
        /// <param name="refundReviewEnabled">Return only objects depending on whether the field RefundReviewEnabled is set to true or false. Optional.</param>
        /// <param name="includeSchemeConfiguration">Indicates whether the full SchemeConfiguration object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetConnectorsHttpResponse> Connectors2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, string name = null, bool? includeMerchant = null, bool? mandateReviewEnabled = null, bool? paymentReviewEnabled = null, bool? payoutReviewEnabled = null, bool? refundReviewEnabled = null, bool? includeSchemeConfiguration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Connectors?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundReviewEnabled != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundReviewEnabled") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundReviewEnabled, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeSchemeConfiguration != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeSchemeConfiguration") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeSchemeConfiguration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetConnectorsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new customer
        /// </summary>
        /// <remarks>
        /// Creates a new customer. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateCustomerHttpResponse> CustomersPOSTAsync(CreateCustomerHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Customers");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateCustomerHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of customers
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of customers.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.          
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetCustomersHttpResponse> CustomersGETAsync(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, bool? includeMerchant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Customers?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCustomersHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific customer
        /// </summary>
        /// <remarks>
        /// Returns a specific customer.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetCustomerHttpResponse> CustomersGET2Async(string id, bool? includeMerchant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Customers/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCustomerHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new hosted page
        /// </summary>
        /// <remarks>
        /// Creates a new hosted page. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateHostedPageHttpResponse> HostedPagesPOSTAsync(CreateHostedPageHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateHostedPageHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of hosted pages
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of hosted pages.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on.
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp. Optional.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp.
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp. Optional.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included. Optional.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetHostedPagesHttpResponse> HostedPagesGETAsync(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, string state = null, string merchantId = null, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetHostedPagesHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific hosted page
        /// </summary>
        /// <remarks>
        /// Returns a specific hosted page.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included. Optional.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetHostedPageHttpResponse> HostedPagesGET2Async(string id, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetHostedPageHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View the hosted page
        /// </summary>
        /// <remarks>
        /// View the hosted page. Returns HTML.
        /// </remarks>
        /// <param name="successUrl">The URL to which SEPAexpress redirects the customer after the hosted page process is successfully completed.</param>
        /// <param name="failUrl">The URL to which SEPAexpress redirects the customer if the hosted page process fails.</param>
        /// <returns>Success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ViewAsync(string id, string successUrl = null, string failUrl = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/HostedPages/{id}/View?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (successUrl != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("successUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(successUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (failUrl != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("failUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(failUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 302)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("HTTP redirect.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client has not provided a valid Authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client has provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too Many Requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific localizationText
        /// </summary>
        /// <remarks>
        /// Returns a specific localizationText.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetLocalizationTextHttpResponse> LocalizationTextsAsync(string key, string merchantId = null, string languageCode = null, string countryCode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (key == null)
                throw new System.ArgumentNullException("key");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/LocalizationTexts/{key}?");
            urlBuilder_.Replace("{key}", System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture)));
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (languageCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("languageCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(languageCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("countryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetLocalizationTextHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new mandate
        /// </summary>
        /// <remarks>
        /// Creates a new mandate. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateMandateHttpResponse> MandatesPOSTAsync(CreateMandateHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of mandates
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of mandates.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.                      
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.                   
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.              
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.              
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional.</param>
        /// <param name="customerId">Return only objects with this customer id. Optional.</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional.</param>
        /// <param name="scheme">Return only objects with this payment scheme. Optional.</param>
        /// <param name="reference">Return only objects with this mandate reference. Optional.</param>
        /// <param name="type">Return only objects with this mandate type. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMandatesHttpResponse> MandatesGETAsync(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string scheme = null, string reference = null, string type = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includeConnector = null, bool? includeMerchant = null, bool? includeHostedPage = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scheme != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scheme") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMandatesHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific mandate
        /// </summary>
        /// <remarks>
        /// Returns a specific mandate.
        /// </remarks>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMandateHttpResponse> MandatesGET2Async(string id, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includeConnector = null, bool? includeMerchant = null, bool? includeHostedPage = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approves a mandate
        /// </summary>
        /// <remarks>
        /// Approves a mandate.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApproveMandateHttpResponse> ApproveAsync(string id, ApproveMandateHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Approve");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be approved by your request cannot be approved", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new approval TAN and re-sends it via email or sms to the customer
        /// </summary>
        /// <remarks>
        /// Creates a new approval TAN and re-sends it via email or sms to the customer.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResendMandateHttpResponse> ResendAsync(string id, ResendMandateHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Resend");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResendMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this mandate
        /// </summary>
        /// <remarks>
        /// Manually accept or reject this mandate.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewMandateHttpResponse> ReviewAsync(string id, ReviewMandateHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Discards a mandate
        /// </summary>
        /// <remarks>
        /// Discards a mandate. Pending dependent transactions get also aborted.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DiscardMandateHttpResponse> DiscardAsync(string id, DiscardMandateHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Discard");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DiscardMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid Authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be discarded by your request cannot be discarded.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reinstates a discarded or expired mandate
        /// </summary>
        /// <remarks>
        /// Reinstates a discarded or expired mandate.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReinstateMandateHttpResponse> ReinstateAsync(string id, ReinstateMandateHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Mandates/{id}/Reinstate");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReinstateMandateHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific merchant
        /// </summary>
        /// <remarks>
        /// Returns a specific merchant.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMerchantHttpResponse> MerchantsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Merchants/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMerchantHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of merchants
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of merchants.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetMerchantsHttpResponse> Merchants2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Merchants?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetMerchantsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new payment
        /// </summary>
        /// <remarks>
        /// Creates a new payment. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePaymentHttpResponse> PaymentsPOSTAsync(CreatePaymentHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePaymentHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of payments
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of payments.
        /// </remarks>
        /// <param name="ids">Return only objects that match the specified ids. Optional.</param>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional.</param>
        /// <param name="customerId">Return only objects with this customer id. Optional.</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional.</param>
        /// <param name="mandateId">Return only objects with this mandate id. Optional.</param>
        /// <param name="reference">Return only objects with this payment reference. Optional.</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included. Optional.</param>
        /// <param name="submittedUntil">Return only objects which were submitted at this timestamp.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPaymentsHttpResponse> PaymentsGETAsync(System.Collections.Generic.IEnumerable<string> ids = null, string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string mandateId = null, string reference = null, string currencyCode = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includeConnector = null, bool? includeMerchant = null, bool? includeHostedPage = null, System.DateTimeOffset? submittedUntil = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (submittedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("submittedUntil") + "=").Append(System.Uri.EscapeDataString(submittedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPaymentsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific payment
        /// </summary>
        /// <remarks>
        /// Returns a specific payment.
        /// </remarks>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeHostedPage">Indicates whether the full hosted page object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPaymentHttpResponse> PaymentsGET2Async(string id, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includeConnector = null, bool? includeMerchant = null, bool? includeHostedPage = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeHostedPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeHostedPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeHostedPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPaymentHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this payment
        /// </summary>
        /// <remarks>
        /// Manually accept or reject this payment.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewPaymentHttpResponse> Review2Async(string id, ReviewPaymentHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payments/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewPaymentHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new payout
        /// </summary>
        /// <remarks>
        /// Creates a new payout. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePayoutHttpResponse> PayoutsPOSTAsync(CreatePayoutHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePayoutHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of payouts
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of payouts.
        /// </remarks>
        /// <param name="ids">Return only objects that match the specified ids. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional.</param>
        /// <param name="customerId">Return only objects with this customer id. Optional.</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional.</param>
        /// <param name="reference">Return only objects with this payout reference. Optional.</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="submittedUntil">Return only objects which were submitted at this timestamp.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPayoutsHttpResponse> PayoutsGETAsync(System.Collections.Generic.IEnumerable<string> ids = null, string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string reference = null, string currencyCode = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeConnector = null, bool? includeMerchant = null, System.DateTimeOffset? submittedUntil = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (submittedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("submittedUntil") + "=").Append(System.Uri.EscapeDataString(submittedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPayoutsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific payout
        /// </summary>
        /// <remarks>
        /// Returns a specific payout.
        /// </remarks>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPayoutHttpResponse> PayoutsGET2Async(string id, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeConnector = null, bool? includeMerchant = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPayoutHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this payout
        /// </summary>
        /// <remarks>
        /// Manually accept or reject this payout.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewPayoutHttpResponse> Review3Async(string id, ReviewPayoutHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Payouts/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewPayoutHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific reconciliation
        /// </summary>
        /// <remarks>
        /// Returns a specific reconciliation.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included. Optional.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included. Optional.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetReconciliationHttpResponse> ReconciliationsAsync(string id, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Reconciliations/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetReconciliationHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of reconciliations
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of reconciliations.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="bookingDateFrom">Return only objects which were booked from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="bookingDateUntil">Return only objects which were booked until this timestamp. Optional.           
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional.</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional.</param>
        /// <param name="customerId">Return only objects with this customerId. Optional.</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional.</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional.</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional.</param>
        /// <param name="refundId">Return only objects with this refundId. Optional.</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional.</param>
        /// <param name="entity">Return only objects for this entity. Optional.</param>
        /// <param name="iban">Return only objects with this IBAN. Optional.</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional.</param>
        /// <param name="reference">Return only objects with this reference. Optional.</param>
        /// <param name="idempotencyKey">Return only objects with this idempotencyKey. Optional.</param>
        /// <param name="cause">Return only objects with this cause. Optional.</param>
        /// <param name="scheme">Return only objects with this payment scheme. Optional.</param>
        /// <param name="reasonCode">Return only objects with this reason code. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included. Optional.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetReconciliationsHttpResponse> Reconciliations2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? bookingDateFrom = null, System.DateTimeOffset? bookingDateUntil = null, string state = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string mandateId = null, string paymentId = null, string refundId = null, string payoutId = null, string entity = null, string iban = null, string currencyCode = null, string reference = null, string idempotencyKey = null, string cause = null, string scheme = null, string reasonCode = null, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Reconciliations?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bookingDateFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bookingDateFrom") + "=").Append(System.Uri.EscapeDataString(bookingDateFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bookingDateUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bookingDateUntil") + "=").Append(System.Uri.EscapeDataString(bookingDateUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (entity != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("entity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(entity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iban != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("iban") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iban, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idempotencyKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idempotencyKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idempotencyKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cause != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cause") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cause, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scheme != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scheme") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scheme, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reasonCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reasonCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reasonCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetReconciliationsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new refund
        /// </summary>
        /// <remarks>
        /// Creates a new refund. The newly created resource can be referenced by the URI given by a Location header field in the response.
        /// </remarks>
        /// <returns>Created. The request has been fulfilled and resulted in a new resource being created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateRefundHttpResponse> RefundsPOSTAsync(CreateRefundHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateRefundHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of refunds
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of refunds.
        /// </remarks>
        /// <param name="ids">Return only objects that match the specified ids. Optional.</param>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchant id. Optional.</param>
        /// <param name="connectorId">Return only objects with this connector id. Optional.</param>
        /// <param name="customerId">Return only objects with this customer id. Optional.</param>
        /// <param name="bankAccountId">Return only objects with this bank account id. Optional.</param>
        /// <param name="mandateId">Return only objects with this mandate id. Optional.</param>
        /// <param name="paymentId">Return only objects with this payment id. Optional.</param>
        /// <param name="reference">Return only objects with this refund reference. Optional.</param>
        /// <param name="currencyCode">Return only objects with this currency code. Optional.</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <param name="submittedUntil">Return only objects which were submitted at this timestamp.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetRefundsHttpResponse> RefundsGETAsync(System.Collections.Generic.IEnumerable<string> ids = null, string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string mandateId = null, string paymentId = null, string reference = null, string currencyCode = null, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, System.DateTimeOffset? submittedUntil = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reference != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reference") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reference, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currencyCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (submittedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("submittedUntil") + "=").Append(System.Uri.EscapeDataString(submittedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRefundsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific refund
        /// </summary>
        /// <remarks>
        /// Returns a specific refund.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetRefundHttpResponse> RefundsGET2Async(string id, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetRefundHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Manually accept or reject this refund
        /// </summary>
        /// <remarks>
        /// Manually accept or reject this refund.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReviewRefundHttpResponse> Review4Async(string id, ReviewRefundHttpRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Refunds/{id}/Review");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReviewRefundHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Conflict. The resource to be created by your request already exists.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific process
        /// </summary>
        /// <remarks>
        /// Returns a specific process.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessHttpResponse> ProcessesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Processes/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of processs
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of processs.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="type">Return only objects with this type. Optional</param>
        /// <param name="origin">Return only objects with this origin. Optional</param>
        /// <param name="name">Return only objects with this name. Optional</param>
        /// <param name="className">Return only objects with this classname. Optional</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessesHttpResponse> Processes2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string type = null, string origin = null, string name = null, string className = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Processes?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (className != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("className") + "=").Append(System.Uri.EscapeDataString(ConvertToString(className, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessesHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific ProcessEvent
        /// </summary>
        /// <remarks>
        /// Returns a specific ProcessEvent.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessEventHttpResponse> ProcessEventsAsync(string id, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, bool? includeReconciliation = null, bool? includeProcess = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/ProcessEvents/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessEventHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of ProcessEvents
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of ProcessEvents.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 10. Maximum of 50. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this ProcessId. Optional</param>
        /// <param name="type">Return only objects of this type. Optional</param>
        /// <param name="origin">Return only objects with this origin. Optional</param>
        /// <param name="cause">Return only objects with this cause. Optional</param>
        /// <param name="reasonCode">Return only objects with this reason code. Optional</param>
        /// <param name="trigger">Return only objects with this trigger. Optional</param>
        /// <param name="token">Return only objects with this token. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetProcessEventsHttpResponse> ProcessEvents2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string mandateId = null, string paymentId = null, string refundId = null, string payoutId = null, string reconciliationId = null, string processId = null, string type = null, string origin = null, string cause = null, string reasonCode = null, string trigger = null, string token = null, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, bool? includeReconciliation = null, bool? includeProcess = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/ProcessEvents?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reconciliationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reconciliationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reconciliationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (origin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("origin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(origin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cause != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cause") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cause, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reasonCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reasonCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reasonCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (trigger != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("trigger") + "=").Append(System.Uri.EscapeDataString(ConvertToString(trigger, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (token != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetProcessEventsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific webhook
        /// </summary>
        /// <remarks>
        /// Returns a specific webhook.
        /// </remarks>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookHttpResponse> WebhooksAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Webhooks/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of webhooks
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of webhooks.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="state">Return only objects with this state. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhooksHttpResponse> Webhooks2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, string state = null, string url = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/Webhooks?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (url != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("url") + "=").Append(System.Uri.EscapeDataString(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhooksHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific webhookEvent
        /// </summary>
        /// <remarks>
        /// Returns a specific webhookEvent.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included. Optional.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included. Optional.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included. Optional.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included. Optional.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included. Optional.</param>
        /// <param name="includeWebhook">Indicates whether the full webhook object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventHttpResponse> WebhookEventsAsync(string id, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, bool? includeReconciliation = null, bool? includeProcess = null, bool? includeProcessEvent = null, bool? includeWebhook = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEvents/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of webhookEvents
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of webhookEvents.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional.</param>
        /// <param name="before">Return only objects before this cursor id. Optional.</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 50. Maximum of 500. Optional.</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional.         
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Optional.       
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Optional.        
        /// <br/>Note: Do not use timestamps for the paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="isSuccessfullyTransmitted">Returns either true or false depending on whether the webhook event was successfully transmitted. Optional.</param>
        /// <param name="transmissionCount">Returns how often the webhook event was transmitted. Optional.</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this processId. Optional</param>
        /// <param name="processEventId">Return only objects with this processEventId. Optional</param>
        /// <param name="webhookId">Return only objects with this webhookId. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included. Optional.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included. Optional.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included. Optional.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included. Optional.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included. Optional.</param>
        /// <param name="includePayment">Indicates whether the full payment object should be included. Optional.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included. Optional.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included. Optional.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included. Optional.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included. Optional.</param>
        /// <param name="includeProcessEvent">Indicates whether the full process event object should be included. Optional.</param>
        /// <param name="includeWebhook">Indicates whether the full webhook object should be included. Optional.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventsHttpResponse> WebhookEvents2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, bool? isSuccessfullyTransmitted = null, int? transmissionCount = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string mandateId = null, string paymentId = null, string refundId = null, string payoutId = null, string reconciliationId = null, string processId = null, string processEventId = null, string webhookId = null, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, bool? includeReconciliation = null, bool? includeProcess = null, bool? includeProcessEvent = null, bool? includeWebhook = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEvents?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isSuccessfullyTransmitted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isSuccessfullyTransmitted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isSuccessfullyTransmitted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (transmissionCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transmissionCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transmissionCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reconciliationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reconciliationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reconciliationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processEventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processEventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processEventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webhookId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a specific webhookEventTransmission
        /// </summary>
        /// <remarks>
        /// Returns a specific webhookEventTransmission.
        /// </remarks>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <param name="includeWebhookEvent">Indicates whether the full WebhookEvent object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventTransmissionHttpResponse> WebhookEventTransmissionsAsync(string id, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, bool? includeReconciliation = null, bool? includeProcess = null, bool? includeProcessEvent = null, bool? includeWebhook = null, bool? includeWebhookEvent = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEventTransmissions/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhookEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhookEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhookEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventTransmissionHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Not Found. The requested resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a cursor paged list of webhookEventTransmissions
        /// </summary>
        /// <remarks>
        /// Returns a cursor paged list of webhookEventTransmissions.
        /// </remarks>
        /// <param name="after">Return only objects after this cursor id. Optional</param>
        /// <param name="before">Return only objects before this cursor id. Optional</param>
        /// <param name="limit">Upper bound for the number of objects to be returned. Defaults to 10. Maximum of 50. Optional</param>
        /// <param name="createdFrom">Return only objects which were created from this timestamp on. Optional. Remark: Do not use timestamps for the
        /// <br/>paging of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="createdUntil">Return only objects which were created until this timestamp. Optional. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedFrom">Return only objects which were last modified from this timestamp on. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="lastModifiedUntil">Return only objects which were last modified until this timestamp. Remark: Do not use timestamps for the paging
        /// <br/>of search results as there can be multiple objects with the same timestamp.</param>
        /// <param name="statusCode">Return only objects with this statusCode. Optional</param>
        /// <param name="merchantId">Return only objects with this merchantId. Optional</param>
        /// <param name="connectorId">Return only objects with this connectorId. Optional</param>
        /// <param name="customerId">Return only objects with this customerId. Optional</param>
        /// <param name="bankAccountId">Return only objects with this bankAccountId. Optional</param>
        /// <param name="mandateId">Return only objects with this mandateId. Optional</param>
        /// <param name="paymentId">Return only objects with this paymentId. Optional</param>
        /// <param name="refundId">Return only objects with this refundId. Optional</param>
        /// <param name="payoutId">Return only objects with this payoutId. Optional</param>
        /// <param name="reconciliationId">Return only objects with this reconciliationId. Optional</param>
        /// <param name="processId">Return only objects with this processId. Optional</param>
        /// <param name="processEventId">Return only objects with this processEventId. Optional</param>
        /// <param name="webhookId">Return only objects with this webhookId. Optional</param>
        /// <param name="webhookEventId">Return only objects with this webhookEventId. Optional</param>
        /// <param name="includeMerchant">Indicates whether the full merchant object should be included.</param>
        /// <param name="includeConnector">Indicates whether the full connector object should be included.</param>
        /// <param name="includeCustomer">Indicates whether the full customer object should be included.</param>
        /// <param name="includeBankAccount">Indicates whether the full bank account object should be included.</param>
        /// <param name="includeMandate">Indicates whether the full mandate object should be included.</param>
        /// <param name="includePayment">Indicates whether the full Payment object should be included.</param>
        /// <param name="includeRefund">Indicates whether the full refund object should be included.</param>
        /// <param name="includePayout">Indicates whether the full payout object should be included.</param>
        /// <param name="includeReconciliation">Indicates whether the full reconciliation object should be included.</param>
        /// <param name="includeProcess">Indicates whether the full process object should be included.</param>
        /// <param name="includeProcessEvent">Indicates whether the full processEvent object should be included.</param>
        /// <param name="includeWebhook">Indicates whether the full Webhook object should be included.</param>
        /// <param name="includeWebhookEvent">Indicates whether the full WebhookEvent object should be included.</param>
        /// <returns>Ok. Standard response for successful HTTP requests.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWebhookEventTransmissionsHttpResponse> WebhookEventTransmissions2Async(string after = null, string before = null, int? limit = null, System.DateTimeOffset? createdFrom = null, System.DateTimeOffset? createdUntil = null, System.DateTimeOffset? lastModifiedFrom = null, System.DateTimeOffset? lastModifiedUntil = null, int? statusCode = null, string merchantId = null, string connectorId = null, string customerId = null, string bankAccountId = null, string mandateId = null, string paymentId = null, string refundId = null, string payoutId = null, string reconciliationId = null, string processId = null, string processEventId = null, string webhookId = null, string webhookEventId = null, bool? includeMerchant = null, bool? includeConnector = null, bool? includeCustomer = null, bool? includeBankAccount = null, bool? includeMandate = null, bool? includePayment = null, bool? includeRefund = null, bool? includePayout = null, bool? includeReconciliation = null, bool? includeProcess = null, bool? includeProcessEvent = null, bool? includeWebhook = null, bool? includeWebhookEvent = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/services/v2/WebhookEventTransmissions?");
            if (after != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after") + "=").Append(System.Uri.EscapeDataString(ConvertToString(after, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before") + "=").Append(System.Uri.EscapeDataString(ConvertToString(before, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdFrom") + "=").Append(System.Uri.EscapeDataString(createdFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdUntil") + "=").Append(System.Uri.EscapeDataString(createdUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedFrom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedFrom") + "=").Append(System.Uri.EscapeDataString(lastModifiedFrom.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedUntil != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUntil") + "=").Append(System.Uri.EscapeDataString(lastModifiedUntil.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (statusCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("statusCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(statusCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (merchantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("merchantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(merchantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (connectorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("connectorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(connectorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("bankAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mandateId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mandateId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mandateId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("paymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payoutId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payoutId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(payoutId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reconciliationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reconciliationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reconciliationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processEventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processEventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processEventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webhookId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (webhookEventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("webhookEventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(webhookEventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMerchant != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMerchant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMerchant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeConnector != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeConnector") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeConnector, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCustomer != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCustomer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCustomer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeBankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeBankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeBankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeMandate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeMandate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeMandate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeRefund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeRefund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeRefund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includePayout != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includePayout") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includePayout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeReconciliation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeReconciliation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeReconciliation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcess != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcess") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcess, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeProcessEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeProcessEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeProcessEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhook != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhook") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhook, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeWebhookEvent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeWebhookEvent") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeWebhookEvent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWebhookEventTransmissionsHttpResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Bad Request. The request could not be understood by the server, usually due to malformed syntax.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized. The client did not provide a valid authentication HTTP header or the user making the request has been disabled.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Forbidden. The client provided a valid authentication header, but does not have permission to access this resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 429)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Too many requests. A rate limit has been reached.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateBankAccountHttpRequest
    {
        /// <summary>
        /// The unique identifier of the customer this bank account object belongs to.
        /// <br/>Mandatory, unless a new customer to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateCustomerHttpRequest Customer { get; set; } = new CreateCustomerHttpRequest();

        /// <summary>
        /// Account holder’s given name. Will be derived from the customer's first name if not filled in. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountHolder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// The ISO 13616 international bank account number. Optional when nested in hosted page. For most countries, especially in the SEPA area,
        /// <br/>using the IBAN is the preferred way to specify a bank account.
        /// <br/>Alternatively the country code and the national fields can be used. (bankCode, branchCode, accountNumber)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 15)]
        public string Iban { get; set; }

        /// <summary>
        /// The ISO 9362 business identifier code. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?)$")]
        public string Bic { get; set; }

        /// <summary>
        /// The ISO 4217 currency code. If the bank account IBAN is filled in and available, the currency code will be derived from it. 
        /// <br/>If this field is not filled in the currencyCode will be set to euro by default. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code. If the bank account IBAN is filled in and available, the country code will be derived from it.  
        /// <br/>Will be set to the german country code if empty. Optional.
        /// <br/>Note: If no IBAN is provided, the countryCode is mandatory together with the national fields.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The national bank code.
        /// <br/>Length and format depend on national regulations defined by the country code.
        /// <br/>Optional, but only if IBAN is provided.
        /// <br/>Mandatory if field for IBAN is empty and national regulations require the field to be filled in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BankCode { get; set; }

        /// <summary>
        /// The national branch code. Length and format depend on national regulations defined by the country code.
        /// <br/>Optional, but only if IBAN is provided.
        /// <br/>Mandatory if field for IBAN is empty and national regulations require the field to be filled in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("branchCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BranchCode { get; set; }

        /// <summary>
        /// The national account number. Length and format depend on national regulations defined by the country code.
        /// <br/>Optional, but only if IBAN is provided.
        /// <br/>Mandatory if field for IBAN is empty and national regulations require the field to be filled in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(14, MinimumLength = 1)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation. Optional, but highly recommended to use.
        /// <br/>When given, SEPAexpress checks whether an entity of this type with the specified idempotency key already exists, 
        /// <br/>and fails the creation if a duplicate entity is found. The ID of the conflicting entity can be found in the error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request DTO for the CreateCustomer request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateCustomerHttpRequest
    {
        /// <summary>
        /// The unique identifier of the merchant this customer object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Customer’s salutation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salutation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Salutation { get; set; }

        /// <summary>
        /// Customer’s given name. Required unless a company name is provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("givenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string GivenName { get; set; }

        /// <summary>
        /// Customer’s family name. Required unless a company name is provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Customer’s company name. Required unless a given name and family name are provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The first line of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The postal code of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string City { get; set; }

        /// <summary>
        /// The address region, county or department of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("region")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Region { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// ISO 639-1 code. Used as the language for notification emails sent by SEPAexpress if
        /// <br/>your organisation does not send its own (see compliance requirements). Currently
        /// <br/>only “en”, “fr”, “de” are supported.
        /// <br/>Defaults to the country code of the address or "en" if not supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("languageCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Customer’s email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\A(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)\Z")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Customer’s telephone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("telephone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Telephone { get; set; }

        /// <summary>
        /// Customer’s cellphone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cellphone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Cellphone { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation. Optional, but highly recommended to use.
        /// <br/>When given, SEPAexpress checks whether an entity of this type with the specified idempotency key already exists, 
        /// <br/>and fails the creation if a duplicate entity is found. The ID of the conflicting entity can be found in the error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request DTO for the CreateHostedPage request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateHostedPageHttpRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateMandateHttpRequest Mandate { get; set; } = new CreateMandateHttpRequest();

        /// <summary>
        /// The type of this hosted page. One of:
        /// <br/>* createMandate -     The hosted page is used to create a mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Type { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the connector this object belongs to.
        /// <br/>Optional, unless the associated merchant has more than
        /// <br/>one matching connector configured for the determined payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this mandate object belongs to.
        /// <br/>Mandatory, unless a new bank account to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateBankAccountHttpRequest BankAccount { get; set; } = new CreateBankAccountHttpRequest();

        /// <summary>
        /// The Direct Debit payment scheme this mandate and all dependent payments belong to. Optional.        
        /// <br/>Will be derived from linked bank account if not filled. Possible values:
        /// <br/>
        /// <br/>* SEPA - Single Euro Payments Area
        /// <br/>* BACS - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Scheme { get; set; }

        /// <summary>
        /// The unique reference of this mandate.
        /// <br/>Length and format depend on the regulations defined by the determined payment scheme. Optional.
        /// <br/>If this field is not filled in, SEPAexpress generates a unique reference that meets the requirements of the determined payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The type of this mandate. Optional. Possible values:
        /// <br/>* single - The mandate can be used for a single payment. It will expire after the first payment or after a period
        /// <br/>of dormancy as defined by the payment scheme. 
        /// <br/>* recurring - The mandate can be used for an unlimited number of payments. It will expire after a period of
        /// <br/>dormancy as defined by the payment scheme. This is the default.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Type { get; set; }

        /// <summary>
        /// The approvalBy specifies the way the customer approves the mandate. Optional. Possible values:      
        /// <br/>* **click** - Click mandate. The mandate is approved by ticking a check box and/or clicking an approve button on the web page.
        /// <br/>* **email** - Email mandate. The customer receives an email containing a secret Tan or a link to click.         
        /// <br/>              The field emailAddress inside of the customer object is required to contain a valid email address to sign via email.
        /// <br/>* **sms** -   SMS mandate. The customer receives a sms containing a secret Tan.
        /// <br/>              The field cellphone inside of the customer object is required to contain a valid cellphone number to sign via sms.
        /// <br/>* **ais** -   Account Information Service mandate. The mandate is approved by using a PSD2 AIS account check via the online
        /// <br/>              banking of the customer's bank. When the amount and currency are provided, an additional balance check is executed.
        /// <br/>* **dynamic** - Dynamic mandate management. The mandate type is managed by SEPAexpress based on configured parameters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(click|sms|email|ais|dynamic)$")]
        public string ApprovalBy { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation. Optional, but highly recommended to use.
        /// <br/>When given, SEPAexpress checks whether an entity of this type with the specified idempotency key already exists, 
        /// <br/>and fails the creation if a duplicate entity is found. The ID of the conflicting entity can be found in the error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// The field ApprovalDate indicates when the mandate was signed. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? ApprovalDate { get; set; }

        /// <summary>
        /// The ISO 4217 currency code. Used mainly for AIS mandate with balance check.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The maximum amount that can be collected from the customer's bank account for this mandate.
        /// <br/>Specified in the smallest subunit of the used currency, e.g. cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApproveMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The approval Tan.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string Tan { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResendMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Possible values:
        /// <br/>* accept - Accept the creation of this mandate.
        /// <br/>* reject - Reject the creation of this mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(accept|reject)$")]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DiscardMandateHttpRequest
    {
        /// <summary>
        /// The Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReinstateMandateHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatePaymentHttpRequest
    {
        /// <summary>
        /// The unique identifier of the mandate this payment object belongs to.
        /// <br/>Mandatory, unless a new mandate to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateMandateHttpRequest Mandate { get; set; } = new CreateMandateHttpRequest();

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to be collected from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The unique reference of this payment. This id is used for matching payments and refunds on the
        /// <br/>participating bank accounts. Length, format and content depend on the regulations defined
        /// <br/>by the determined payment scheme. Often called End2EndId in the SEPA scheme. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payment. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme. Optional.
        /// <br/>SEPAexpress will generate a scheme compliant soft descriptor, if left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines when this payment should be earliest submitted
        /// <br/>to the customer's bank account. Optional.
        /// <br/>Payments will be submitted as soon as possible, if not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation. Optional, but highly recommended to use.
        /// <br/>When given, SEPAexpress checks whether an entity of this type with the specified idempotency key already exists, 
        /// <br/>and fails the creation if a duplicate entity is found. The ID of the conflicting entity can be found in the error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding IBAN of the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationMerchantId { get; set; }

        /// <summary>
        /// Optional. Mark this payment as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* ais - Account Information Service mandate. The customer is redirected to his selected bank login and after successful authorization he gets redirected back to merchant site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(ais)$")]
        public string ApprovalBy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewPaymentHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payment object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Possible values:        
        /// <br/>* accept - Accept the creation of this payment
        /// <br/>* reject - Reject the creation of this payment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(accept|reject)$")]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatePayoutHttpRequest
    {
        /// <summary>
        /// The unique identifier of the connector this object belongs to.
        /// <br/>Optional. Mandatory if the associated merchant has more than
        /// <br/>one matching connector configured for the determined payout scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this payout object belongs to.
        /// <br/>Mandatory, unless a new bank account to create is given.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateBankAccountHttpRequest BankAccount { get; set; } = new CreateBankAccountHttpRequest();

        /// <summary>
        /// The Direct Debit payment scheme to which this mandate and all dependent
        /// <br/>payments belong. Optional. Will be derived from the associated
        /// <br/>bank account if left empty.         
        /// <br/>Possible values:        
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Scheme { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to be paid out to the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this payment. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length, format
        /// <br/>and content depend on the regulations defined by the determined payment scheme.
        /// <br/>Often called End2EndId in the SEPA scheme. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payout. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme. Optional. SEPAexpress will
        /// <br/>generate a scheme compliant soft descriptor, if left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines when this payout should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payouts will
        /// <br/>be submitted as soon as possible, if not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation. Optional, but highly recommended to use.
        /// <br/>When given, SEPAexpress checks whether an entity of this type with the specified idempotency key already exists, 
        /// <br/>and fails the creation if a duplicate entity is found. The ID of the conflicting entity can be found in the error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding IBAN of the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewPayoutHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payout object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Possible values:        
        /// <br/>* accept - Accept the creation of this payout
        /// <br/>* reject - Reject the creation of this payout
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?i)^(accept|reject)$")]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateRefundHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payment this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to be sent to the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR. Optional. The entire remaining refundable
        /// <br/>amount of the associated payment will be refunded, if left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The soft descriptor for this refund. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme. Optional. SEPAexpress will
        /// <br/>generate a scheme compliant soft descriptor, if left empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines when this refund should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Refunds will
        /// <br/>be submitted as soon as possible, if not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation. Optional, but highly recommended to use.
        /// <br/>When given, SEPAexpress checks whether an entity of this type with the specified idempotency key already exists, 
        /// <br/>and fails the creation if a duplicate entity is found. The ID of the conflicting entity can be found in the error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in a validation error if the content does not match the corresponding id of the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewRefundHttpRequest
    {
        /// <summary>
        /// The unique identifier of the payment object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Possible values:        
        /// <br/>* accept - Accept the creation of this refund
        /// <br/>* reject - Reject the creation of this refund
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string Action { get; set; }

        /// <summary>
        /// Memo for free use by the PSP.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateBankAccountHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a bank account object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BankAccount
    {
        /// <summary>
        /// The unique identifier of this bank account object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this bank account object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the customer this bank account object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this bank account object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The bank account is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this bank account object gets active.
        /// <br/>* active - The bank account has been successfully set up.
        /// <br/>* failed - The bank account could not be set up.
        /// <br/>* discarded - The bank account has been discarded.
        /// <br/>* expired - The bank account has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// Account holder’s company name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountHolder")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// The ISO 13616 international bank account number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 15)]
        public string Iban { get; set; }

        /// <summary>
        /// The ISO 9362 business identifier code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?)$")]
        public string Bic { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The national bank code. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BankCode { get; set; }

        /// <summary>
        /// The national branch code. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("branchCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength = 1)]
        public string BranchCode { get; set; }

        /// <summary>
        /// The national account number. Length and format dependent
        /// <br/>on national regulations defined by the country code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(14, MinimumLength = 1)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a merchant object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Merchant
    {
        /// <summary>
        /// The unique identifier of this merchant object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this merchant object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The merchant is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this merchant object gets active.
        /// <br/>* pendingOnboarding - The onboarding for the merchant is pending.
        /// <br/>* pendingGoLive - The go live for the merchant is pending.
        /// <br/>* active - The merchant has been successfully set up.
        /// <br/>* failed - The merchant could not be set up.
        /// <br/>* discarded - The merchant has been discarded.
        /// <br/>* expired - The merchant has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// Merchant's name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// Configuration for the merchant
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("configuration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Configuration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a customer object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Customer
    {
        /// <summary>
        /// The unique identifier of this customer object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this customer object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this customer object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The customer is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this customer object gets active.
        /// <br/>* active - The customer has been successfully set up.
        /// <br/>* failed - The customer could not be set up.
        /// <br/>* discarded - The customer has been discarded.
        /// <br/>* expired - The customer has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// Customer’s salutation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("salutation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Salutation { get; set; }

        /// <summary>
        /// Customer’s given name. Required unless a company name is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("givenName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string GivenName { get; set; }

        /// <summary>
        /// Customer’s family name. Required unless a company name is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("familyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Customer’s company name. Required unless a given name and family name are provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The first line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressLine3")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The postal code of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The city of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string City { get; set; }

        /// <summary>
        /// The address region, county or department of the customer’s address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("region")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Region { get; set; }

        /// <summary>
        /// The ISO 3166-1 alpha-2 country code of the customer’s address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// ISO 639-1 code. Used as the language for notification emails sent by SEPAexpress if
        /// <br/>your organization does not send its own (see compliance requirements). Currently
        /// <br/>only “en”, “fr”, “de” are supported.
        /// <br/>Defaults to the country code of the address or "en" if not supported
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("languageCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Customer’s email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\A(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)\Z")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Customer’s telephone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("telephone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Telephone { get; set; }

        /// <summary>
        /// Customer’s cellphone number. ITU-T E.164 formatted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cellphone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\+?[1-9]\d{1,14}$")]
        public string Cellphone { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for an erroneous request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required]
        public Error Error { get; set; } = new Error();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of an error object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The unique identifier of this object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The status code of this error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Message { get; set; }

        /// <summary>
        /// The reason code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The cause.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Cause { get; set; }

        /// <summary>
        /// The trigger.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trigger")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Trigger { get; set; }

        /// <summary>
        /// The token.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Token { get; set; }

        /// <summary>
        /// The description.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Description { get; set; }

        /// <summary>
        /// The action.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Action { get; set; }

        /// <summary>
        /// The best practice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bestPractice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string BestPractice { get; set; }

        /// <summary>
        /// List of error details.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<ErrorDetail> Details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of an error detail object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// The error detail message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Message { get; set; }

        /// <summary>
        /// List of fields.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged bank account list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetBankAccountsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of bank accounts.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<BankAccount> BankAccounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Paging meta data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CursorPagedMeta
    {
        /// <summary>
        /// The unique identifier of the first item that has been returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("before")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Before { get; set; }

        /// <summary>
        /// The unique identifier of the last item that has been returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("after")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string After { get; set; }

        /// <summary>
        /// The upper bound placed on the number of items returned. If there were not enough 
        /// <br/>remaining items in the list of data then fewer than this number will have been returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetBankAccount request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetBankAccountHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]
        [System.ComponentModel.DataAnnotations.Required]
        public BankAccount BankAccount { get; set; } = new BankAccount();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetConnector request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetConnectorHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("connector")]
        [System.ComponentModel.DataAnnotations.Required]
        public Connector Connector { get; set; } = new Connector();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a connector object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Connector
    {
        /// <summary>
        /// The unique identifier of this connector object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this connector object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this connector object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The connector is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this connector object gets active.
        /// <br/>* pendingOnboarding - The onboarding for the merchant is pending.
        /// <br/>* active - The connector has been successfully set up.
        /// <br/>* failed - The connector could not be set up.
        /// <br/>* discarded - The connector has been discarded.
        /// <br/>* expired - The connector has expired due to dormancy.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// The name of this connector object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Name { get; set; }

        /// <summary>
        /// The payment scheme this connector belongs to. Optional.
        /// <br/>Will be derived from the linked settlement IBAN when not filled.
        /// <br/>One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Scheme { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* payment - The connector is used to collect payments from customers.
        /// <br/>* payout - The connector is used to payout money to customers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// Optional. One of:
        /// <br/>* generate - mandate documents will be generated for newly created payment mandates.
        /// <br/>* archive - mandate documents will be generated and archived for newly created payment mandates.
        /// <br/>* send - mandate documents will be generated, archived and sent to the customer for newly created payment mandates.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateHandling")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string MandateHandling { get; set; }

        /// <summary>
        /// Optional. One of:
        /// <br/>* generate - mandate setup confirmation documents will be generated for newly created payment mandates.
        /// <br/>* archive - mandate setup confirmation documents will be generated and archived for newly created payment mandates.
        /// <br/>created payment mandates.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateSetupConfirmationHandling")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string MandateSetupConfirmationHandling { get; set; }

        /// <summary>
        /// Optional. One of:
        /// <br/>* generate - payment pre notification documents will be generated for newly created payments.
        /// <br/>* archive - payment pre notification documents will be generated and archived for newly created payments.
        /// <br/>* send - payment pre notification documents will be generated, archived and sent to the customer for newly created
        /// <br/>payments.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentPreNotificationHandling")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string PaymentPreNotificationHandling { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandateReviewEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? MandateReviewEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentReviewEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? PaymentReviewEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payoutReviewEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? PayoutReviewEnabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refundReviewEnabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? RefundReviewEnabled { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("schemeConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public SepaConfiguration SchemeConfiguration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SepaConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("creditorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CreditorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentProcessorName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string PaymentProcessorName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payoutProcessorName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string PayoutProcessorName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refundProcessorName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string RefundProcessorName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refundQueuingDays")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? RefundQueuingDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("debtCollection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? DebtCollection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("emailConfig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public EmailConfig EmailConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("smsConfig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public SmsConfig SmsConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("riskCheckConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public RiskCheckConfiguration RiskCheckConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pspName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string PspName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("b4PId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string B4PId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCompanyDirectDebit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IsCompanyDirectDebit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isCompanyDirectDebitB2C")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IsCompanyDirectDebitB2C { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enforceAis")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? EnforceAis { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aisConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public AisConfiguration AisConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostedPagesConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HostedPagesConfigurationDto HostedPagesConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("tokenIoConfig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public TokenIoConfig TokenIoConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("finTsConfig")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public FinTsConfig FinTsConfig { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dynamicMandateConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public DynamicMandateConfigurationDto DynamicMandateConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("templateConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public TemplateConfiguration TemplateConfiguration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankingCircleConfiguration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankingCircleConfiguration BankingCircleConfiguration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EmailConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("fromName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string FromName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fromEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string FromEmail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SmsConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("fromName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string FromName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RiskCheckConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? Enabled { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandateMinAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? MandateMinAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandateMaxAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? MandateMaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentMinAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? PaymentMinAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentMaxAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? PaymentMaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("historicalBalanceCheckTimeSpan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public TimeSpan HistoricalBalanceCheckTimeSpan { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentMaxCountPerPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<CountPerTimeSpan> PaymentMaxCountPerPeriod { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CountPerTimeSpan
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeSpan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public TimeSpan TimeSpan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AisConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("routes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<AisProviderRoute> Routes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastSyncDifferenceTimeSpan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public TimeSpan LastSyncDifferenceTimeSpan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AisProviderRoute
    {

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Bic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("providers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Providers> Providers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HostedPagesConfigurationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("styles")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HostedPagesConnectorStylesDto Styles { get; set; }

        /// <summary>
        /// "ACCOUNT_HOLDER" | "COMPANY_NAME" | "FIRST_AND_LAST_NAME"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requiredNameField")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string RequiredNameField { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hideAllInputs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? HideAllInputs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HostedPagesConnectorStylesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("logoUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string LogoUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryColor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string PrimaryColor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("backgroundColor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string BackgroundColor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("borderRadius")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string BorderRadius { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TokenIoConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ApiKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baseApiUri")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string BaseApiUri { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string PublicKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webAppUriTemplate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string WebAppUriTemplate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string MemberId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("memberAliasType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string MemberAliasType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customizationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CustomizationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("validateSignature")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidateSignature { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FinTsConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ApiKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("riskApiKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string RiskApiKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DynamicMandateConfigurationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("amounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<DynamicMandateAmountDto> Amounts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DynamicMandateAmountDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ApprovalBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TemplateConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("creditorStreetNameAndNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CreditorStreetNameAndNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditorPostalCodeCity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CreditorPostalCodeCity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchantLogo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string MerchantLogo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BankingCircleConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("credentialsId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CredentialsId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string MaxDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stopAtPage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? StopAtPage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("productCodes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<string> ProductCodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged connector list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetConnectorsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of connectors.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Connector> Connectors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the CreateCustomer request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateCustomerHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public Customer Customer { get; set; } = new Customer();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged customer list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetCustomersHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of customers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Customer> Customers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetCustomer request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetCustomerHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public Customer Customer { get; set; } = new Customer();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the CreateHostedPage request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateHostedPageHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HostedPage HostedPage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a HostedPage object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HostedPage
    {
        /// <summary>
        /// The unique identifier of this hosted page object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this hosted page object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payment Payment { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this hosted page object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The hosted page is created and its id can be immediately used in subsequent calls to the API.
        /// <br/>* pending - The hosted page is currently displayed to the customer.
        /// <br/>* success - The hosted page workflow finished successfully.
        /// <br/>* failed - The hosted page workflow failed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// One of:
        /// <br/> * CreateMandate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Type { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the cause for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Cause { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the reason code for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the trigger for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trigger")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Trigger { get; set; }

        /// <summary>
        /// When the hosted page has failed this contains the token for failure.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Token { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a mandate object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Mandate
    {
        /// <summary>
        /// The unique identifier of this mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate object replacing this mandate object.
        /// <br/>Optional. Only filled, when this mandate has been replaced by another mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("replacedByMandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReplacedByMandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("replacedByMandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate ReplacedByMandate { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this mandate object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The mandate is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this mandate object gets active.
        /// <br/>* pendingApproval - The mandate requires the approval by the customer (e.g. email and sms mandates).
        /// <br/>* pendingSecondaryApproval - The mandate requires an additional approval (e.g. permission from a second signatory),
        /// <br/>and that approval is pending.
        /// <br/>* pendingReview - The review of the mandate by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines paymentMandateReview.enabled as true.
        /// <br/>* pendingSubmission - The mandate has not yet been submitted to the customer’s bank.
        /// <br/>* submitted - The mandate has been submitted to the customer’s bank, but has not been processed yet.
        /// <br/>* active - The mandate has been successfully set up.
        /// <br/>* failed - The mandate could not be set up.
        /// <br/>* discarded - The mandate has been discarded.
        /// <br/>* expired - The mandate has expired due to dormancy.
        /// <br/>* replaced - The mandate has been replaced by a new mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// The Direct Debit payment scheme this mandate and all dependent
        /// <br/>payments belong to. One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Scheme { get; set; }

        /// <summary>
        /// The unique reference of this mandate. Length and format dependent
        /// <br/>on regulations defined by the determined payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The type of this mandate. One of:
        /// <br/>* single - The mandate can be used for a single payment. It will expire after the first payment or after a period
        /// <br/>of dormancy as defined by the payment scheme.
        /// <br/>* recurring - The mandate can be used for an unlimited number of payments. It will expire after a period of
        /// <br/>dormancy as defined by the payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the generated mandate. This field is only filled, when the
        /// <br/>mandate generation feature is enabled in the merchant connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string MandateUrl { get; set; }

        /// <summary>
        /// The URL of the generated mandate setup confirmation. This field is only filled, when the
        /// <br/>mandate setup confirmation generation feature is enabled in the merchant connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateSetupConfirmationUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string MandateSetupConfirmationUrl { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// Optional. Mark this mandate as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* click - Click mandate. The mandate is approved by ticking a check box and/or clicking an approve button on the web page.
        /// <br/>* email - Email mandate. The customer is sent an email containing a secret Tan and/or a link to click. The customer
        /// <br/>email address has to be filled.
        /// <br/>* sms - SMS mandate. The customer is sent a sms containing a secret Tan. The customer cellphone number has to be
        /// <br/>filled.
        /// <br/>* ais - Account Information Service mandate. The mandate is approved by using a PSD2 AIS account check via the internet
        /// <br/>banking of the customer's bank. When the amount and currency are also given in this request an additional balance check
        /// <br/>is executed.
        /// <br/>* dynamic - Dynamic mandate management. The mandate type is managed by SEPA.express based on configured parameters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ApprovalBy { get; set; }

        /// <summary>
        /// ApprovalDate is an optional field that indicates when the mandate was signed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? ApprovalDate { get; set; }

        /// <summary>
        /// The ISO 4217 currency code. used mainly for AIS mandate with Balance Check
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The max allowable amount to collect from the customer's bank account for this mandate.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique identifier of the hosted page this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostedPageId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string HostedPageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HostedPage HostedPage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a payment object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Payment
    {
        /// <summary>
        /// The unique identifier of this payment object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this payment object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The payment is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this payment object gets paid.
        /// <br/>* pendingApproval - The payment requires the approval by the customer.
        /// <br/>* pendingReview - The review of the payment by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines paymentsNeedReview as true.
        /// <br/>* pendingSubmission - The payment has not yet been submitted toward the customer's bank.
        /// <br/>* submitted - The payment has been submitted toward the customer's bank, but the processing has not been finished
        /// <br/>yet.
        /// <br/>* paid - The payment has been successfully collected from the customer.
        /// <br/>* failed - The payment could not be set up.
        /// <br/>* discarded - The payment has been discarded.
        /// <br/>* chargedBack - The payment has been charged back by the customer’s bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to collect from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Amount { get; set; }

        /// <summary>
        /// The unique reference of this payment. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme. Often called End2EndId in the SEPA scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payment. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// The number of requested refunds for this payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? RefundCount { get; set; }

        /// <summary>
        /// The amount of all requested refunds for this payment.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? RefundAmount { get; set; }

        /// <summary>
        /// Defines, when this payment should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payments will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The URL of the generated payment pre notification. This field is only filled, when the
        /// <br/>payment pre notification generation feature is enabled in the merchant connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentPreNotificationUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string PaymentPreNotificationUrl { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding iban from the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationMerchantId { get; set; }

        /// <summary>
        /// Optional. Mark this payment as not yet approved by the customer.
        /// <br/>SEPAexpress will initiate the approval process. One of:
        /// <br/>* ais - Account Information Service mandate. The payment is approved by using a PSD2 AIS account check via the internet
        /// <br/>banking of the customer's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ApprovalBy { get; set; }

        /// <summary>
        /// ApprovalDate is an optional field that indicates when the payment was signed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? ApprovalDate { get; set; }

        /// <summary>
        /// The unique identifier of the hosted page this payment object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostedPageId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string HostedPageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HostedPage HostedPage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged customer list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetHostedPagesHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of HostedPages.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostedPages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<HostedPage> HostedPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetHostedPage request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetHostedPageHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("hostedPage")]
        [System.ComponentModel.DataAnnotations.Required]
        public HostedPage HostedPage { get; set; } = new HostedPage();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for GetLocalizationText list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetLocalizationTextHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("localizationText")]
        [System.ComponentModel.DataAnnotations.Required]
        public LocalizationText LocalizationText { get; set; } = new LocalizationText();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a mandate object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LocalizationText
    {
        /// <summary>
        /// The unique identifier of this mandate object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Key { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this mandate object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("languageCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string LanguageCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged mandate list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetMandatesHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of mandates.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandates")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Mandate> Mandates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged mandate list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApproveMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResendMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DiscardMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReinstateMandateHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mandate Mandate { get; set; } = new Mandate();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetMerchant request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetMerchantHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]
        [System.ComponentModel.DataAnnotations.Required]
        public Merchant Merchant { get; set; } = new Merchant();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged merchant list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetMerchantsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of merchants.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchants")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Merchant> Merchants { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatePaymentHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        [System.Text.Json.Serialization.JsonPropertyName("error")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Error Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged payment list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPaymentsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of payments.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetPayment request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPaymentHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewPaymentHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment Payment { get; set; } = new Payment();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatePayoutHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payout Payout { get; set; } = new Payout();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a payout object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Payout
    {
        /// <summary>
        /// The unique identifier of this payout object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this payout object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this payout object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The payout is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this payout object gets active.
        /// <br/>* pendingReview - The review of the payout by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines payoutsNeedReview as true.
        /// <br/>* pendingSubmission - The payout has not yet been submitted toward the customer's bank.
        /// <br/>* submitted - The payout has been submitted toward the customer's bank, but the processing has not been finished
        /// <br/>yet.
        /// <br/>* paid - The payout has been successfully collected from the customer.
        /// <br/>* failed - The payout could not be set up.
        /// <br/>* discarded - The payout has been discarded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to collect from the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this payout. This id is used for matching
        /// <br/>payouts and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payout scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this payout. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used payout scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this payout should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Payouts will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding iban from the stored mandate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationIban { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged payout list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPayoutsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of payouts.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payouts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Payout> Payouts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetPayout request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPayoutHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payout Payout { get; set; } = new Payout();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewPayoutHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("payout")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payout Payout { get; set; } = new Payout();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetReconciliation request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetReconciliationHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("reconciliation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reconciliation Reconciliation { get; set; } = new Reconciliation();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a reconciliation object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Reconciliation
    {
        /// <summary>
        /// The unique identifier of this reconciliation object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Payment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this reconciliation object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payout Payout { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this reconciliation object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The entity this reconciliation belongs to. One of:
        /// <br/>* payment
        /// <br/>* payout
        /// <br/>* refund
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Entity { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* paid
        /// <br/>* failed
        /// <br/>* discarded
        /// <br/>* chargedBack
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 13616 international bank account number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Iban { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount of the transaction.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this transaction. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme. Often called End2EndId in the SEPA scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Reference { get; set; }

        /// <summary>
        /// The unique transaction id of this transaction defined by the PSP.
        /// <br/>Optional, but highly recommended to use.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// The booking date equals the settlement date on the bank account and
        /// <br/>is important for accounting and reconciliation. The value date can
        /// <br/>be one day later.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bookingDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? BookingDate { get; set; }

        /// <summary>
        /// What triggered this reconciliation entry. Optional. Only
        /// <br/>filled when a bank report is the origin of this reconciliation
        /// <br/>entry.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Cause { get; set; }

        /// <summary>
        /// The payment scheme this reconciliation belongs to. Optional. Only
        /// <br/>filled when a bank report is the origin of this reconciliation.
        /// <br/>entry. One of:
        /// <br/>* sepa - Single Euro Payments Area
        /// <br/>* bacs - Bankers Automated Clearing Services
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scheme")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Scheme { get; set; }

        /// <summary>
        /// The reason code. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The trigger. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trigger")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Trigger { get; set; }

        /// <summary>
        /// The token. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Token { get; set; }

        /// <summary>
        /// The info for this reconciliation. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("info")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Info { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a refund object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Refund
    {
        /// <summary>
        /// The unique identifier of this refund object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The unique identifier of the connector this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The unique identifier of the customer this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string MandateId { get; set; }

        /// <summary>
        /// The unique identifier of the payment this refund object belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this refund object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The refund is created and its id can be immediately used in subsequent calls to the API. The execution
        /// <br/>of dependent subsequent calls will get postponed until this refund object gets active.
        /// <br/>* pendingReview - The review of the refund by the merchant is pending. Only applicable if the associated connector
        /// <br/>defines refundsNeedReview as true.
        /// <br/>* pendingSubmission - The refund has not yet been submitted toward the customer's bank.
        /// <br/>* submitted - The refund has been submitted toward the customer's bank, but the processing has not been finished
        /// <br/>yet.
        /// <br/>* paid - The refund has been successfully paid to the customer.
        /// <br/>* failed - The refund could not be set up.
        /// <br/>* discarded - The refund has been discarded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string State { get; set; }

        /// <summary>
        /// The ISO 4217 currency code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount to refund to the customer's bank account.
        /// <br/>Specified in the smallest subunit of the used currency, e.g.
        /// <br/>cents for EUR.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Amount { get; set; }

        /// <summary>
        /// The unique reference of this refund. This id is used for matching
        /// <br/>payments and refunds on the participating bank accounts. Length,
        /// <br/>format and content are dependent on the regulations defined by
        /// <br/>the used payment scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }

        /// <summary>
        /// The soft descriptor for this refund. The text entered here will be
        /// <br/>printed on the bank statements of the participating bank accounts,
        /// <br/>if supported in the used refund scheme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("softDescriptor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(140)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Defines, when this refund should be earliest submitted
        /// <br/>to the customer's bank account. Optional. Refunds will
        /// <br/>be submitted as soon as possible, when not specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("submitAfter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.DateTimeOffset? SubmitAfter { get; set; }

        /// <summary>
        /// The unique idempotency key of this entity creation.
        /// <br/>Optional, but highly recommended to use. When given, SEPAexpress
        /// <br/>will check, whether an entity of this type with the given
        /// <br/>idempotency key does already exist, and will fail the creation,
        /// <br/>if a duplicate entity is found. The error message will contain
        /// <br/>the id of the conflicting entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("idempotencyKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string IdempotencyKey { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Memo { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationCustomerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationCustomerId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored bank account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationBankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationBankAccountId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored connector.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationConnectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationConnectorId { get; set; }

        /// <summary>
        /// If provided, it will result in an validation error if the content is different to the corresponding id from the stored merchant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationMerchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ValidationMerchantId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged reconciliation list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetReconciliationsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of reconciliations.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Reconciliation> Reconciliations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateRefundHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        [System.ComponentModel.DataAnnotations.Required]
        public Refund Refund { get; set; } = new Refund();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged refund list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetRefundsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Refund> Refunds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetRefund request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetRefundHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        [System.ComponentModel.DataAnnotations.Required]
        public Refund Refund { get; set; } = new Refund();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReviewRefundHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        [System.ComponentModel.DataAnnotations.Required]
        public Refund Refund { get; set; } = new Refund();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetProcess request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetProcessHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("process")]
        [System.ComponentModel.DataAnnotations.Required]
        public Process Process { get; set; } = new Process();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a process object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Process
    {
        /// <summary>
        /// The unique identifier of this process object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this process object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Process’s type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Type { get; set; }

        /// <summary>
        /// Process’s origin
        /// <br/>One of:
        /// <br/>* Api 
        /// <br/>* Bank
        /// <br/>* Internal 
        /// <br/>* User
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string Origin { get; set; }

        /// <summary>
        /// Process’s name. 
        /// <br/>One of:
        /// <br/>* Http 
        /// <br/>* Queue
        /// <br/>* Timer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged process list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetProcessesHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of processes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Process> Processes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetProcessEvent request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetProcessEventHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("processEvent")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProcessEvent ProcessEvent { get; set; } = new ProcessEvent();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a process event object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProcessEvent
    {
        /// <summary>
        /// The unique identifier of this process event object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payout Payout { get; set; }

        /// <summary>
        /// The unique identifier of the process this process event object
        /// <br/>belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("process")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Process Process { get; set; }

        /// <summary>
        /// The unique identifier of the reconciliation this process event object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReconciliationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciliation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Reconciliation Reconciliation { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this process event object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The type of this process event object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Type { get; set; }

        /// <summary>
        /// What triggered this process event. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Cause { get; set; }

        /// <summary>
        /// The reason code. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// The description. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Description { get; set; }

        /// <summary>
        /// The recommended action. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Action { get; set; }

        /// <summary>
        /// The best practice to follow. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bestPractice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string BestPractice { get; set; }

        /// <summary>
        /// The data of this process event. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged webhook event list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetProcessEventsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of processEvents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processEvents")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<ProcessEvent> ProcessEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetWebhook request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetWebhookHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        [System.ComponentModel.DataAnnotations.Required]
        public Webhook Webhook { get; set; } = new Webhook();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a web hook object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Webhook
    {
        /// <summary>
        /// The unique identifier of this web hook object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this web hook object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// One of:
        /// <br/>* created - The web hook is created and its id can be immediately used in subsequent calls to the API. The
        /// <br/>execution of dependent subsequent calls will get postponed until this webhook object gets active.
        /// <br/>* active - The web hook has been successfully set up.
        /// <br/>* failed - The web hook could not be set up.
        /// <br/>* discarded - The web hook has been discarded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string State { get; set; }

        /// <summary>
        /// The URL of the server that will receive the web hook POST requests.
        /// <br/>Only HTTPS endpoints supporting TLS 1.2 are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Url { get; set; }

        /// <summary>
        /// Setting a web hook secret allows you to ensure that POST requests
        /// <br/>sent to the configured URL are from SEPAexpress. When you set a
        /// <br/>secret, you'll receive the X-Hub-Signature header in the web hook
        /// <br/>POST request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("secret")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Secret { get; set; }

        /// <summary>
        /// Set additional HTTP headers in the web hook request.  Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additionalHeaders")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<Header> AdditionalHeaders { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("configuration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public WebhookConfiguration Configuration { get; set; }

        /// <summary>
        /// Memo for free use by the PSP
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string Memo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Header
    {
        /// <summary>
        /// The header name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Name { get; set; }

        /// <summary>
        /// The header name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The request DTO for the CreateWebhook request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebhookConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("merchants")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<string> Merchants { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connectors")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<string> Connectors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<string> EventTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeMerchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeMerchant { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeConnector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeConnector { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeCustomer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeCustomer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeBankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeBankAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeMandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeMandate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includePayment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludePayment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includePayout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludePayout { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeProcess")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeProcess { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeReconciliation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeReconciliation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("includeRefund")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IncludeRefund { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged web hook list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetWebhooksHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of web hooks.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhooks")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Webhook> Webhooks { get; set; } = new System.Collections.ObjectModel.Collection<Webhook>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetWebhookEvent request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetWebhookEventHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhookEvent")]
        [System.ComponentModel.DataAnnotations.Required]
        public WebhookEvent WebhookEvent { get; set; } = new WebhookEvent();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a webhookEvent object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebhookEvent
    {
        /// <summary>
        /// The unique identifier of this webhookEvent object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this webhookEvent object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Is Webhook event Successfully Transmitted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isSuccessfullyTransmitted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public bool? IsSuccessfullyTransmitted { get; set; }

        /// <summary>
        /// count of transmission
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transmissionCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? TransmissionCount { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Payment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payout Payout { get; set; }

        /// <summary>
        /// The unique identifier of the process this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("process")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Process Process { get; set; }

        /// <summary>
        /// The unique identifier of the processEvent this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processEventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processEvent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public ProcessEvent ProcessEvent { get; set; }

        /// <summary>
        /// The unique identifier of the reconciliation this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReconciliationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciliation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Reconciliation Reconciliation { get; set; }

        /// <summary>
        /// The unique identifier of the webhook this webhookEvent object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string WebhookId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Webhook Webhook { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged webHookEvent list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetWebhookEventsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of webhookEvents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookEvents")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<WebhookEvent> WebhookEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response DTO for the GetWebhookEventTransmission request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetWebhookEventTransmissionHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhookEventTransmission")]
        [System.ComponentModel.DataAnnotations.Required]
        public WebhookEventTransmission WebhookEventTransmission { get; set; } = new WebhookEventTransmission();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters of a webhookEventTransmission object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebhookEventTransmission
    {
        /// <summary>
        /// The unique identifier of this webhookEventTransmission object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string Id { get; set; }

        /// <summary>
        /// Fixed timestamp, recording when this webhookEventTransmission object was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Data Data { get; set; }

        /// <summary>
        /// The unique identifier of the merchant this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchantId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MerchantId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("merchant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// The unique identifier of the connector this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ConnectorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("connector")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Connector Connector { get; set; }

        /// <summary>
        /// The unique identifier of the customer this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The unique identifier of the bank account this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public BankAccount BankAccount { get; set; }

        /// <summary>
        /// The unique identifier of the mandate this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mandateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string MandateId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mandate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Mandate Mandate { get; set; }

        /// <summary>
        /// The unique identifier of the payment this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PaymentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Payment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payment Payment { get; set; }

        /// <summary>
        /// The unique identifier of the refund this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string RefundId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("refund")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Refund Refund { get; set; }

        /// <summary>
        /// The unique identifier of the payout this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payoutId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string PayoutId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payout")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Payout Payout { get; set; }

        /// <summary>
        /// The unique identifier of the process this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("process")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Process Process { get; set; }

        /// <summary>
        /// The unique identifier of the webhookEvent this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processEventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ProcessEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("processEvent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public ProcessEvent ProcessEvent { get; set; }

        /// <summary>
        /// The unique identifier of the reconciliation this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string ReconciliationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationEvent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Reconciliation ReconciliationEvent { get; set; }

        /// <summary>
        /// The unique identifier of the webhook this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string WebhookId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Webhook Webhook { get; set; }

        /// <summary>
        /// The unique identifier of the webhook event this webhookEventTransmission object
        /// <br/>belongs to. Optional.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookEventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 32)]
        public string WebhookEventId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("webhookEvent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public Webhook WebhookEvent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Data
    {

        [System.Text.Json.Serialization.JsonPropertyName("httpRequest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HttpRequest HttpRequest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpResponse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public HttpResponse HttpResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HttpRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("requestUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string RequestUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("headers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Headers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cookies")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.IDictionary<string, string> Cookies { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("httpMethod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public string HttpMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public object Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public int? StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public object Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The response model for cursor-based paged webHookEventTransmission list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetWebhookEventTransmissionsHttpResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("meta")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public CursorPagedMeta Meta { get; set; }

        /// <summary>
        /// List of webHookEventTransmissions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webhookEventTransmissions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        public System.Collections.Generic.ICollection<WebhookEventTransmission> WebhookEventTransmissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Providers
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TokenIo")]
        TokenIo = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FinTs")]
        FinTs = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FinTsRisk")]
        FinTsRisk = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603